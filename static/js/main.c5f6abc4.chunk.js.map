{"version":3,"sources":["Disk.tsx","useEventListener.js","Pointer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Canvas","styled","canvas","props","rotation","Disk","canvasRef","React","createRef","useEffect","current","ctx","getContext","width","height","Error","CENTER","RADIUS","slice","start","color","beginPath","moveTo","arc","Math","PI","lineTo","fillStyle","closePath","fill","ref","useEventListener","eventName","handler","element","window","savedHandler","addEventListener","eventListener","event","removeEventListener","Handle","div","attrs","style","transform","Pointer","handleRef","isDragging","setIsDragging","startX","setStartX","forceRotation","setRotation","onMouseDown","target","x","onMouseUp","onChange","onMouseMove","d","max","min","Container","ButtonContainer","Cover","isOpen","App","database","coverRef","useState","setIsOpen","isPeeking","setIsPeeking","forcePointer","setforcePointer","randomize","useCallback","random","set","onRandomizeClick","once","handlePointerChange","reveal","on","data","values","val","discRotation","revealed","pointerRotation","className","onClick","onMouseLeave","Boolean","location","hostname","match","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2WAGA,IAAMA,EAASC,IAAOC,OAAV,KACS,SAAAC,GAAK,OAAIA,EAAMC,SAAW,MA6DhCC,MApDf,SAAcF,GACb,IAAMG,EAAYC,IAAMC,YA0CxB,OAzCAD,IAAME,WAAU,WACf,GAAIH,EAAUI,QAAS,CACtB,IAAMC,EAAML,EAAUI,QAAQE,WAAW,MACzC,IAAKD,EACJ,OAHqB,MAKIL,EAAUI,QAA5BG,EALc,EAKdA,MAAOC,EALO,EAKPA,OACf,GAAID,IAAUC,EACb,MAAM,IAAIC,MAAM,+BAEjB,IAAMC,EAA2B,CAACH,EAAQ,EAAGC,EAAS,GAChDG,EAASJ,EAAQ,EAEjBK,EAAQ,SAACC,EAAeC,GACxBT,IAGLA,EAAIU,YACJV,EAAIW,OAAJ,MAAAX,EAAcK,GACdL,EAAIY,IAAIP,EAAO,GAAIA,EAAO,GAAIC,EAAQE,EAAOA,EAASK,KAAKC,GAAK,IA3BhD,IA4BhBd,EAAIe,OAAJ,MAAAf,EAAcK,GACdL,EAAIgB,UAAYP,EAChBT,EAAIiB,YACJjB,EAAIkB,SAGLlB,EAAIU,YAEJV,EAAIY,IAAIP,EAAO,GAAIA,EAAO,GAAIC,EAAQ,EAAa,EAAVO,KAAKC,IAC9Cd,EAAIgB,UAAY,OAChBhB,EAAIkB,OAEJX,GAAQM,KAAKC,GAAK,IAAO,IAAK,UAC9BP,GAAQM,KAAKC,GAAK,IAAO,GAAI,UAE7BP,GAAQM,KAAKC,GAAK,IAAO,IAAK,UAC9BP,GAAQM,KAAKC,GAAK,IAAO,GAAI,UAE7BP,GAAQM,KAAKC,GAAK,IAAO,GAAI,gBAE5B,CAACnB,EAAUI,UACP,kBAACV,EAAD,CACNa,MAAM,MACNC,OAAO,MACPgB,IAAKxB,EACLF,SAAUD,EAAMC,YC1DH,SAAS2B,EAAiBC,EAAWC,GAA2B,IAAlBC,EAAiB,uDAAPC,OAEhEC,EAAe7B,WAMrBA,aAAgB,WACd6B,EAAa1B,QAAUuB,IACtB,CAACA,IAEJ1B,aACE,WAID,GADoB2B,GAAWA,EAAQG,iBACvC,CAGA,IAAMC,EAAgB,SAAAC,GAAK,OAAIH,EAAa1B,QAAQ6B,IAMpD,OAHAL,EAAQG,iBAAiBL,EAAWM,GAG7B,WACLJ,EAAQM,oBAAoBR,EAAWM,OAGxC,CAACN,EAAWE,I,mNCvBf,IAAMO,EAASxC,IAAOyC,IAAIC,OAA4B,SAAAxC,GAAK,MAAK,CAC/DyC,MAAO,CACNC,UAAU,UAAD,OAAY1C,EAAMC,SAAlB,YAFIH,CAAH,KAcG,SAAS6C,EAAQ3C,GAC/B,IAAM4C,EAAYxC,SAAoC,MADT,EAETA,YAAe,GAFN,mBAEtCyC,EAFsC,KAE1BC,EAF0B,OAGjB1C,WAAe,GAHE,mBAGtC2C,EAHsC,KAG9BC,EAH8B,OAIb5C,WAAeJ,EAAMiD,eAJR,mBAItChD,EAJsC,KAI5BiD,EAJ4B,KAKvCC,EAAc/C,eAAkB,SAACgC,GACjCQ,EAAUrC,SAGX6B,EAAMgB,SAAWR,EAAUrC,UAC9ByC,EAAUZ,EAAMiB,GAChBP,GAAc,MAEb,IACGQ,EAAYlD,eAAkB,SAACgC,GAC/BS,IAGLC,GAAc,GACd9C,EAAMuD,SAAStD,MACb,CAAC4C,EAAY5C,IACVuD,EAAcpD,eAAkB,SAACgC,GACtC,GAAKS,EAAL,CAGA,IAAMY,EAAIrB,EAAMiB,EAAIN,EACpBC,EAAUZ,EAAMiB,GAChBH,EAAY7B,KAAKqC,IAAIrC,KAAKsC,IAAI1D,EAAWwD,EAAI,EAAG,KAAM,QACpD,CAACZ,EAAY5C,EAAU8C,IAQ1B,OAPA3C,aAAgB,WACf0C,GAAc,GACdI,EAAYlD,EAAMiD,iBAChB,CAACjD,EAAMiD,gBACVrB,EAAiB,YAAauB,GAC9BvB,EAAiB,UAAW0B,GAC5B1B,EAAiB,YAAa4B,GAE7B,gBAAClB,EAAD,CAAQX,IAAKiB,EAAW3C,SAAUA,I,ukBCjDpC,IAAM2D,EAAY9D,IAAOyC,IAAV,KAITsB,EAAkB/D,IAAOyC,IAAV,KAQfuB,EAAQhE,IAAOyC,IAAV,KASG,SAAAvC,GAAK,OAAIA,EAAM+D,OAAS,kBAAoB,kBAkE3CC,MA9Df,SAAahE,GACZ,IAAMiE,EAAWjE,EAAMiE,SACjBC,EAAW9D,IAAMC,YAFG,EAGMD,IAAM+D,SAAS,GAHrB,mBAGnBlE,EAHmB,KAGTiD,EAHS,OAIE9C,IAAM+D,UAAS,GAJjB,mBAInBJ,EAJmB,KAIXK,EAJW,OAKQhE,IAAM+D,UAAS,GALvB,mBAKnBE,EALmB,KAKRC,EALQ,OAMclE,IAAM+D,SAAS,GAN7B,mBAMnBI,EANmB,KAMLC,EANK,KAOpBC,EAAYrE,IAAMsE,aAAY,WACnC,IAAMzE,EAA2B,IAAhBoB,KAAKsD,SACtBV,EAAStC,IAAI,iBAAiBiD,IAAI3E,GAClCiD,EAAYjD,KACV,IACG4E,EAAmBzE,IAAMsE,aAAY,WACrCR,EAAS3D,UAGVwD,GACHK,GAAU,GACVH,EAAStC,IAAI,aAAaiD,KAAI,GAC9BV,EAAS3D,QAAQ2B,iBAAiB,gBAAiBuC,EAAW,CAAEK,MAAM,KAEtEL,OAEC,CAACV,EAAQG,EAAUO,IAChBM,EAAsB3E,IAAMsE,aAAY,SAACzE,GAC9CgE,EAAStC,IAAI,oBAAoBiD,IAAI3E,KACnC,IACG+E,EAAS5E,IAAMsE,aAAY,WAChCT,EAAStC,IAAI,aAAaiD,KAAI,GAC9BR,GAAU,KACR,IASH,OARAhE,IAAME,WAAU,WACf2D,EAAStC,MAAMsD,GAAG,SAAS,SAACC,GAC3B,IAAMC,EAASD,EAAKE,MACpBlC,EAAYiC,EAAOE,cACnBjB,EAAUe,EAAOG,UACjBd,EAAgBW,EAAOI,sBAEtB,IAEF,yBAAKC,UAAU,OACd,4BAAQA,UAAU,cACjB,kBAAC5B,EAAD,KACC,kBAAC,EAAD,CAAM3D,SAAUA,IAChB,kBAAC6D,EAAD,CAAOC,OAAQA,GAAUM,EAAW1C,IAAKuC,IACzC,kBAACvB,EAAD,CAASY,SAAUwB,EAAqB9B,cAAesB,IACvD,kBAACV,EAAD,KACC,4BAAQ4B,QAAS1B,EAASc,EAAmBG,GAASjB,EAAS,YAAc,UAC7E,4BACCZ,YAAa,kBAAMmB,GAAa,IAChChB,UAAW,kBAAMgB,GAAa,IAC9BoB,aAAc,kBAAMpB,GAAa,KAHlC,aCxEcqB,QACW,cAA7B3D,OAAO4D,SAASC,UAEe,UAA7B7D,OAAO4D,SAASC,UAEhB7D,OAAO4D,SAASC,SAASC,MACvB,2D,iBCANC,gBAVuB,CACtBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8CAKRC,IAASC,OAAO,kBAAC,EAAD,CAAKvC,SAAU8B,eAAyBU,SAASC,eAAe,SDuH1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c5f6abc4.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Canvas = styled.canvas<{ rotation: number }>`\n\ttransform: rotate(${props => props.rotation - 90}deg);\n`\n\nconst SLICE_WIDTH = 10; // deg\n\ntype Props = {\n\trotation: number\n}\n\nfunction Disk(props: Props) {\n\tconst canvasRef = React.createRef<HTMLCanvasElement>();\n\tReact.useEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\tconst ctx = canvasRef.current.getContext('2d');\n\t\t\tif (!ctx) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { width, height } = canvasRef.current;\n\t\t\tif (width !== height) {\n\t\t\t\tthrow new Error('Canvas needs to be a square')\n\t\t\t}\n\t\t\tconst CENTER: [number, number] = [width / 2, height / 2];\n\t\t\tconst RADIUS = width / 2;\n\n\t\t\tconst slice = (start: number, color: string) => {\n\t\t\t\tif (!ctx) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(...CENTER);\n\t\t\t\tctx.arc(CENTER[0], CENTER[1], RADIUS, start, start + (Math.PI / 180) * SLICE_WIDTH);\n\t\t\t\tctx.lineTo(...CENTER);\n\t\t\t\tctx.fillStyle = color;\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.fill();\n\t\t\t}\n\n\t\t\tctx.beginPath();\n\t\t\t// Circle background\n\t\t\tctx.arc(CENTER[0], CENTER[1], RADIUS, 0, Math.PI * 2);\n\t\t\tctx.fillStyle = '#fff';\n\t\t\tctx.fill();\n\t\t\t// 2 slices\n\t\t\tslice(-(Math.PI / 180) * 115, 'yellow');\n\t\t\tslice(-(Math.PI / 180) * 75, 'yellow');\n\t\t\t// 3 slices\n\t\t\tslice(-(Math.PI / 180) * 105, 'orange');\n\t\t\tslice(-(Math.PI / 180) * 85, 'orange');\n\t\t\t// 4\n\t\t\tslice(-(Math.PI / 180) * 95, 'turquoise');\n\t\t}\n\t}, [canvasRef.current])\n\treturn <Canvas\n\t\twidth=\"500\"\n\t\theight=\"500\"\n\t\tref={canvasRef}\n\t\trotation={props.rotation}\n\t/>\n\n}\n\nexport default Disk;\n","import * as React from 'react';\n\nexport default function useEventListener(eventName, handler, element = window){\n\t// Create a ref that stores handler\n\tconst savedHandler = React.useRef();\n\t\n\t// Update ref.current value if handler changes.\n\t// This allows our effect below to always get latest handler ...\n\t// ... without us needing to pass it in effect deps array ...\n\t// ... and potentially cause effect to re-run every render.\n\tReact.useEffect(() => {\n\t  savedHandler.current = handler;\n\t}, [handler]);\n  \n\tReact.useEffect(\n\t  () => {\n\t\t// Make sure element supports addEventListener\n\t\t// On \n\t\tconst isSupported = element && element.addEventListener;\n\t\tif (!isSupported) return;\n\t\t\n\t\t// Create event listener that calls handler function stored in ref\n\t\tconst eventListener = event => savedHandler.current(event);\n\t\t\n\t\t// Add event listener\n\t\telement.addEventListener(eventName, eventListener);\n\t\t\n\t\t// Remove event listener on cleanup\n\t\treturn () => {\n\t\t  element.removeEventListener(eventName, eventListener);\n\t\t};\n\t  },\n\t  [eventName, element] // Re-run if eventName or element changes\n\t);\n  };","import * as React from 'react';\nimport styled from 'styled-components';\nimport useEventListener from './useEventListener';\n\ninterface Props {\n\tonChange: (rotation: number) => void,\n\tforceRotation: number\n}\n\nconst Handle = styled.div.attrs<{ rotation: number }>(props => ({\n\tstyle: {\n\t\ttransform: `rotate(${props.rotation}deg)`\n\t}\n}))<{ rotation: number }>`\n\twidth: 8px;\n\theight: 230px;\n\tposition: absolute;\n\ttop: 20px;\n\tleft: 246px;\n\tbackground: red;\n\ttransform-origin: center 100%;\n`\n\nexport default function Pointer(props: Props) {\n\tconst handleRef = React.useRef<HTMLDivElement | null>(null);\n\tconst [isDragging, setIsDragging] = React.useState(false);\n\tconst [startX, setStartX] = React.useState(0);\n\tconst [rotation, setRotation] = React.useState(props.forceRotation);\n\tconst onMouseDown = React.useCallback((event: MouseEvent) => {\n\t\tif (!handleRef.current) {\n\t\t\treturn;\n\t\t}\n\t\tif (event.target === handleRef.current) {\n\t\t\tsetStartX(event.x);\n\t\t\tsetIsDragging(true);\n\t\t}\n\t}, []);\n\tconst onMouseUp = React.useCallback((event: MouseEvent) => {\n\t\tif (!isDragging) {\n\t\t\treturn;\n\t\t}\n\t\tsetIsDragging(false);\n\t\tprops.onChange(rotation);\n\t}, [isDragging, rotation]);\n\tconst onMouseMove = React.useCallback((event: MouseEvent) => {\n\t\tif (!isDragging) {\n\t\t\treturn;\n\t\t}\n\t\tconst d = event.x - startX;\n\t\tsetStartX(event.x);\n\t\tsetRotation(Math.max(Math.min(rotation + d / 2, 90), -90));\n\t}, [isDragging, rotation, startX]);\n\tReact.useEffect(() => {\n\t\tsetIsDragging(false);\n\t\tsetRotation(props.forceRotation);\n\t}, [props.forceRotation]);\n\tuseEventListener('mousedown', onMouseDown);\n\tuseEventListener('mouseup', onMouseUp);\n\tuseEventListener('mousemove', onMouseMove);\n\treturn (\n\t\t<Handle ref={handleRef} rotation={rotation} />\n\t)\n}","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\nimport Disk from './Disk';\nimport Pointer from './Pointer';\nimport { database } from 'firebase';\n\ninterface Props {\n\tdatabase: database.Database\n}\n\nconst Container = styled.div`\n\tposition: relative;\n`\n\nconst ButtonContainer = styled.div`\n\theight: 251px;\n\twidth: 500px;\n\tposition: absolute;\n\ttop: 250px;\n\tbackground: #282c34;\n`\n\nconst Cover = styled.div<{ isOpen: boolean }>`\n\theight: 250px;\n\twidth: 500px;\n\tposition: absolute;\n\tborder-top-left-radius: 250px;\n\tborder-top-right-radius: 250px;\n\ttop: 0px;\n\tbackground: turquoise;\n\ttransform-origin: center 100%;\n\ttransform: ${props => props.isOpen ? 'rotate(-180deg)' : 'rotate(0deg)'};\n\ttransition: transform 0.5s;\n`\n\nfunction App(props: Props) {\n\tconst database = props.database;\n\tconst coverRef = React.createRef<HTMLDivElement>();\n\tconst [rotation, setRotation] = React.useState(0);\n\tconst [isOpen, setIsOpen] = React.useState(true);\n\tconst [isPeeking, setIsPeeking] = React.useState(false);\n\tconst [forcePointer, setforcePointer] = React.useState(0);\n\tconst randomize = React.useCallback(() => {\n\t\tconst rotation = Math.random() * 180;\n\t\tdatabase.ref('/discRotation').set(rotation);\n\t\tsetRotation(rotation);\n\t}, []);\n\tconst onRandomizeClick = React.useCallback(() => {\n\t\tif (!coverRef.current) {\n\t\t\treturn;\n\t\t}\n\t\tif (isOpen) {\n\t\t\tsetIsOpen(false);\n\t\t\tdatabase.ref('/revealed').set(false);\n\t\t\tcoverRef.current.addEventListener('transitionend', randomize, { once: true });\n\t\t} else {\n\t\t\trandomize();\n\t\t}\n\t}, [isOpen, coverRef, randomize]);\n\tconst handlePointerChange = React.useCallback((rotation: number) => {\n\t\tdatabase.ref('/pointerRotation').set(rotation);\n\t}, []);\n\tconst reveal = React.useCallback(() => {\n\t\tdatabase.ref('/revealed').set(true);\n\t\tsetIsOpen(true);\n\t}, []);\n\tReact.useEffect(() => {\n\t\tdatabase.ref().on('value', (data) => {\n\t\t\tconst values = data.val();\n\t\t\tsetRotation(values.discRotation);\n\t\t\tsetIsOpen(values.revealed);\n\t\t\tsetforcePointer(values.pointerRotation);\n\t\t})\n\t}, []);\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<Container>\n\t\t\t\t\t<Disk rotation={rotation} />\n\t\t\t\t\t<Cover isOpen={isOpen || isPeeking} ref={coverRef} />\n\t\t\t\t\t<Pointer onChange={handlePointerChange} forceRotation={forcePointer} />\n\t\t\t\t\t<ButtonContainer>\n\t\t\t\t\t\t<button onClick={isOpen ? onRandomizeClick : reveal}>{isOpen ? 'Randomize' : 'Reveal'}</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonMouseDown={() => setIsPeeking(true)}\n\t\t\t\t\t\t\tonMouseUp={() => setIsPeeking(false)}\n\t\t\t\t\t\t\tonMouseLeave={() => setIsPeeking(false)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tPeek\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</ButtonContainer>\n\t\t\t\t</Container>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n\tapiKey: \"AIzaSyCF-s25_EqfZuS4tTJOaJvQApiy2_exBXw\",\n\tauthDomain: \"kinja-wavelength.firebaseapp.com\",\n\tdatabaseURL: \"https://kinja-wavelength.firebaseio.com\",\n\tprojectId: \"kinja-wavelength\",\n\tstorageBucket: \"kinja-wavelength.appspot.com\",\n\tmessagingSenderId: \"550511849728\",\n\tappId: \"1:550511849728:web:5784b700fe3e52494f83e5\"\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(<App database={firebase.database()} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}